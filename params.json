{"note":"Don't delete this file! It's used internally to help with page regeneration.","body":"Plumage: Biomedical resource discovery for institutions, powered by Eagle-I\r\n\r\n#  About Plumage\r\n\r\nPlumage is free software to make biomedical resources at large\r\ninstitutions more discoverable. It was developed at the University of\r\nCalifornia, San Francisco, to power [UCSF Cores Search], the\r\ncampus-wide search engine for core resources.\r\n\r\n##  Why Plumage?\r\n\r\nDesigned to maximize resource discoverability:\r\n\r\n* typeahead search available on every page\r\n* users can browse through a complete A-Z index of options, including synonyms\r\n* works on cell phones, tablets, and desktop computers\r\n\r\nCarefully optimized for search engine users:\r\n\r\n* every synonym for every concept has its own page\r\n* pages include semantic data via HTML5 + Schema.org microdata\r\n* page titles and content are tuned to meet needs of searchers\r\n\r\nEasy to deploy:\r\n\r\n* pulls data from eagle-i, or from a compatible data source (e.g. CSV file with eagle-i ontology mappings)\r\n* generates a static site, compatible with all web servers on all platforms\r\n\r\nDesigned for success:\r\n\r\n* learn about Plumage's design strategy in the [UCSF Cores Search 2.0: Design Strategy Overview](slides) Slideshare presentation.\r\n\r\n##  Technical overview\r\n\r\nPlumage is an application written in Perl 5.12, and tested on Linux\r\nand MacOS. It extracts data from an instance of eagle-i (or data\r\nmarked up with the eagle-i ontology), and generates a new web site: a\r\nbundle of static HTML, JavaScript, and images that can be deployed on\r\nany server.\r\n\r\nThe software is bundled with a standard set of modern HTML5 web\r\ntemplates created with Template Toolkit, and incorporating cores\r\ndiscoverability best practices originally implemented at UCSF.\r\nGenerated website can be easily customized in two ways:\r\n\r\n* Basic changes (e.g. to the name of the generated website) can be\r\n  made in the plumage.conf configuration file.\r\n\r\n* Many look and feel changes can be made by adding custom header and\r\n  footer HTML, CSS, and JavaScript, to enhance or override the base\r\n  templates. These customizations are stored in a way that allows for\r\n  easy upgrades of the Plumage code and base templates.\r\n\r\n##  Who is Plumage?\r\n\r\nThe Plumage software was developed by Anirvan Chatterjee and the\r\nVirtual Home team at the [Clinical & Translational Science\r\nInstitute][CTSI] at the [University of California, San\r\nFrancisco][UCSF], in collaboration with UCSF's [Research Resources\r\nProgram][RRP]. This project was supported by the National Center for\r\nResearch Resources and the National Center for Advancing Translational\r\nSciences, National Institutes of Health, through UCSF-CTSI Grant\r\nNumbers UL1 RR024131 and UL1 TR000004. Its contents are solely the\r\nresponsibility of the authors and do not necessarily represent the\r\nofficial views of the NIH.\r\n\r\n##  License\r\n\r\nPlumage is Copyright (c) 2012-2013, The Regents of the University of\r\nCalifornia. All rights reserved.\r\n\r\nThis application is free software; you can redistribute it and/or\r\nmodify it under the terms of the BSD license (revised, three clause).\r\nFor more details, see the full text of the license in the file\r\nLICENSE. (TLDRLegal offers a _non-binding_ [human-readable\r\ndescription](TLDRLegal) of this license.)\r\n\r\n### Bundled code\r\n\r\nThe default Plumage distribution is bundled with several other open\r\nsource projects:\r\n\r\n* [Twitter Bootstrap], released under an [Apache 2.0 license]\r\n* [Placeholders.js], released under an [MIT license]\r\n* [Resize Events], released under the [GPL]\r\n\r\nPlumage websites dynamically load [jQuery] and [html5shiv] JavaScript\r\nlibraries (both released under the [MIT license]). The software uses a\r\nnumber of Perl [CPAN] modules during the build process, distributed\r\nunder several open source licenses, typically under the\r\n[same terms][Perl license] as Perl itself.\r\n\r\n##  Support and hosting\r\n\r\nUCSF is happy to help answer questions about Plumage, and may also be\r\nable to offer Plumage as a hosted service for external institutions.\r\n\r\nEmail Anirvan Chatterjee at UCSF (anirvan.chatterjee at ucsf.edu) for\r\nmore details.\r\n\r\n#  Quick start guide\r\n\r\nThis quick start guide is intended to help technical users with an\r\nexisting eagle-i installation get up and running with Plumage in\r\nminutes.\r\n\r\nEnsure you have Perl 5.12 or higher installed on your server. Perl\r\n5.12+ is installed on virtually all current Unix-like distributions,\r\nincluding MacOS 10.7 and higher. If you're unable to upgrade an older\r\nversion of Perl bundled with your system, use [Perlbrew] to install a\r\nnewer version of Perl. Plumage may work on Windows, but hasn't been\r\ntested.\r\n\r\nDownload a [tarball] or [ZIP file] of Plumage from Github. Unarchive\r\nit.\r\n\r\nInstall Plumage and its Perl dependencies. You may be prompted to\r\nconfigure [CPAN] settings; if so, just follow the instructions, and\r\nhit return to stick with the default options.\r\n\r\n    perl Build.PL\r\n    PERL_MM_USE_DEFAULT=1 ./Build installdeps\r\n    # if previous line doesn't work, use only \"./Build installdeps\"\r\n\r\nThen try running the Plumage app.\r\n\r\n    ./bin/plumage\r\n\r\nIf you see a help screen, everything worked.\r\n\r\nNow we're going to configure the simplest possible configuration. Use\r\na text editor to create a file called `plumage.conf` in your current\r\ndirectory with the following contents. (We're using Howard University\r\nas an example.)\r\n\r\n    site_name              = Howard Cores Search\r\n    institution_short_name = Howard\r\n    eagle_i_base_url       = http://howard.eagle-i.net/\r\n    template_path          = /home/webmaster/plumage/templates\r\n    output_path            = /var/www/html/plumage_example\r\n    url                    = http://localhost/plumage_example/\r\n\r\nHere's how to set the configuration options:\r\n\r\n* Set `site_name` to the name of the website you're creating. For\r\n  example, UCSF calls its Plumage site \"UCSF Cores Search\".\r\n\r\n* Set `institution_short_name` to however your users refer to your\r\n  institution when running searches. For example, users at the\r\n  University of California, San Francisco are likely to run web\r\n  searches for things like \"ucsf nmr\" therefore this is set to \"UCSF\".\r\n\r\n* Set `eagle_i_base_url` to the root URL of your eagle-i installation.\r\n  If your installation is centrally hosted, it might look like\r\n  `http://yourname.eagle-i.net/`. If it's password protected, you can\r\n  put the authentication details in the URL, e.g\r\n  `http://username:password@youreagle-i.server.url/`.\r\n\r\n* Set `template_path` to the full path to the `templates` directory\r\n  that comes with this distribution (or a copy thereof). If you don't\r\n  set this, Plumage will try looking in your current directory for a\r\n  `templates` folder.\r\n\r\n* The `output_path` is the place on disk where the new website will be\r\n  written. **Create a new directory**, and enter the path here;\r\n  Plumage will not run if this directory doesn't exist. **Plumage will\r\n  delete and regenerate the contents of this directory every time it\r\n  runs.**\r\n\r\n* Set `url` to the URL where this website will be viewed. If you have\r\n  a local web server, you might use an `http://localhost/` URL. If you\r\n  want to put this on a subdirectory of your dev server you could set\r\n  it to `http://dev.yoursite.edu/cores/`. If you want to use it\r\n  offline, you can use a `file://` URL that corresponds with your\r\n  `output_path` (if your `output_path` is `/tmp/plumage-test` try\r\n  setting your URL to ``file:///tmp/plumage-test/`).\r\n\r\nDone? Let's build the website:\r\n\r\n    ./bin/plumage --build\r\n\r\nYou should see messages showing the website being built.\r\n\r\nPay attention to error messages. Still having problems? Feel free to\r\ncontact Anirvan (anirvan.chatterjee at ucsf.edu) with your questions.\r\n\r\nIf all goes well, your fancy new Plumage website will be written to\r\n`output_path` and you'll be able to view it in a web browser at `url`.\r\n\r\n#  Real world usage\r\n\r\nThe quick start guide left you with a simple generic installation of\r\nPlumage. Now we're going to customize Plumage to meet your needs.\r\n\r\n##  Using roles [IMPORTANT]\r\n\r\nYou can very easily configure multiple instances of Plumage using the\r\nsame configuration file. We call each configured instance a _role_.\r\n\r\nIn your configuration file, put items common to every role at the top.\r\nThen add role blocks below that. Each role block begins with\r\n`[rolename]` on its own line. In this example configuration, the\r\n\"development\" role writes to an `output_path` corresponding to a\r\ndevelopment URL, while the \"production\" role specifies a different\r\noutput path.\r\n\r\n    site_name              = Example University\r\n    institution_short_name = Example\r\n    eagle_i_base_url       = http://example.eagle-i.net/\r\n    template_path          = /home/webmaster/plumage/templates\r\n\r\n    [production]\r\n    url = http://cores.example.edu/\r\n    google_analytics_id = UA-1234567-01\r\n    # build_deploy_command = <see documentation below>\r\n    output_path            = /var/www/site/cores.example.edu/\r\n\r\n    [development]\r\n    url                    = http://dev-cores.example.edu/\r\n    output_path            = /var/www/site/dev-cores.example.edu/\r\n\r\nIf you specify one or more roles, you can build that specific role by\r\nlisting the role name as an argument to `--build`, like this:\r\n\r\n    ./bin/plumage --build development\r\n\r\n##  Customizing look and feel [IMPORTANT]\r\n\r\nAlmost every institution will want to customize the look and feel of\r\nPlumage to match your local branding needs. Plumage is designed to\r\nmake it incredibly easy to make local look and feel changes without\r\nneeding to tweak the default templates, so you can take advantage of\r\nupgraded default templates without losing your local changes.\r\n\r\nThe default templates are stored in the directory specified in\r\n`template_path`. We suggest that you _don't_ edit these templates at\r\nall.\r\n\r\nInstead, **create a new directory for your custom local edits**, and\r\nput the path in your configuration file as `custom_template_path`. For\r\nexample:\r\n\r\n    template_path          = /home/webmaster/plumage/templates\r\n    custom_template_path   = /home/webmaster/plumage/custom_templates\r\n\r\nWhen Plumage is looking for templates, it'll look first in\r\n`custom_template_path`, and only then in `template_path`. So if you\r\nwanted to override a default template, just copy it to\r\n`custom_template_path`, make some tweaks and it'll override the\r\ndefault. But most of the time, you don't even need to do that. Look at\r\nthe HOWTOs below.\r\n\r\n### Static and dynamic content\r\n\r\n*documentation to be written*\r\n\r\n### How templates work\r\n\r\nAll site templates are written using [Template Toolkit], a popular and\r\nvery well-documented templating system for Perl, sort of like PHP's\r\nSmarty or Ruby's ERB.\r\n\r\nPending further documentation, please see the bundled templates to see\r\nhow to use loops and variables.\r\n\r\n*documentation to be written*\r\n\r\n### How Bootstrap works\r\n\r\nAll HTML and CSS on the site is written using [Twitter Bootstrap] 2.2,\r\na popular responsive HTML5/CSS framework. Go read the Bootstrap\r\ndocumentation. You will be confused if you don't.\r\n\r\n*documentation to be written*\r\n\r\n### HOWTO: Add custom CSS\r\n\r\n1. Configure a `custom_template_path` directory\r\n2. Create a new file at `static/assets/css/custom.css` inside the directory\r\n3. Put your CSS there\r\n4. The contents of this file will be read _after_ the default Plumage CSS, which means it should override CSS rules of equal [CSS specificity] (if needed, you can make your CSS more specific or use `!important` for added weight)\r\n\r\n### HOWTO: Add a custom institutional navbar\r\n\r\n1. Configure a `custom_template_path` directory\r\n2. Create a new file called `custom_navbar_top.html.tt` inside the directory\r\n3. Put content there (preferably inside `<div id=\"leaderboard\" class=\"row\"><div class=\"span12\">`)\r\n4. The contents of this file will be automatically included above the Plumage menu in the defaultpage header template (`_header.html.tt`)\r\n5. If needed, add custom CSS styles to #leaderboard as described above\r\n\r\n### HOWTO: Customize the footer\r\n\r\n1. Configure a `custom_template_path` directory\r\n2. Create a new file called `custom_footer.html.tt` inside the directory\r\n3. Put content there, inside one or more `<div class=\"row\">` blocks\r\n4. The content of this file will be automatically included in the default footer template (`_footer.html.tt`)\r\n5. If needed, add custom CSS styles to the contents of #footer as described above\r\n\r\n### HOWTO: Change the contents of the About page\r\n\r\n1. Configure a `custom_template_path` directory\r\n2. Create a new file called `custom_about_page.html.tt` inside the directory\r\n3. Put content there (e.g. `<h2>`s and `<p>`s)\r\n4. The content of this file will be automatically included in the default About page template (`about.html.tt`)\r\n\r\n##  Upgrading the search engine via Swiftype\r\n\r\nPlumage comes packaged with a minimal typeahead search, but we\r\nrecommend plugging in a professional hosted search system.\r\n\r\nPlumage works out of the box with [Swiftype], a free search provider\r\n(like Google Custom Search, but more flexible, and free for most\r\nusers). Swiftype is optional, but *very highly recommended*. Set up a\r\nnew Swiftype account, and an engine for every website for which you\r\nwant to use Swiftype search.\r\n\r\nFor Swiftype to work, you need to configure both an overall\r\n`swiftype_api_key` and a `swiftype_key` for every website role.\r\n\r\n* `swiftype_api_key` is the private account-wide API key listed at\r\n  http://swiftype.com/user/edit\r\n\r\n* `swiftype_key` comes from the line that reads Swiftype.key = '...'\r\n  on the \"Install Options\" page of every Swiftype search engine. If\r\n  you have different versions of your content on main and dev servers,\r\n  you'll have to create two different Swiftype engines, each indexing\r\n  the different sections of your content, and need to ensure that\r\n  Swiftype's servers can index your dev server.\r\n\r\nEvery time you do a new build, Plumage will contact Swiftype's\r\nservers, and use your API keys to kick off a reindex of your content.\r\n(Swiftype may not reindex as frequently as you'd like; check their\r\ndocumentation for details.)\r\n\r\n##  Tracking usage via Google Analytics\r\n\r\nPlumage comes with support for Google Analytics out of the box, just\r\nby adding one line to the configuration file. Start off by creating a\r\nnew Google Analytics account for your Plumage instance.\r\n\r\nThen in the configuration file, set `google_analytics_id` to your new\r\nsite's Google Analytics account ID, e.g.:\r\n\r\n    google_analytics_id = UA-1234567-01\r\n\r\nMake sure to create a new Google Analytics account for every\r\n*production* Plumage instance you create. For example, if you have a\r\nproduction cores.institution.edu and a development\r\ndev-cores.institution.edu, set a Google Analytics ID only for the\r\nproduction role, like this:\r\n\r\n    [production]\r\n    url = http://cores.yoursite.edu/\r\n    google_analytics_id = UA-1234567-01\r\n\r\n    [dev]\r\n    url = http://dev-cores.yoursite.edu/\r\n\r\n### Tracking Swiftype usage\r\n\r\n*documentation to be written*\r\n\r\n##  Ensuring search engine visibility of all pages\r\n\r\nPlumage automatically creates a [sitemap], and lists the location via\r\n[robots.txt][sitemap in robots.txt] file. But search engines will\r\nautomatically discover this `robots.txt` if and only if a Plumage site\r\nis installed at the top level of your site (e.g.\r\n`http://cores.institution.edu/` works, but\r\n`http://www.institution.edu/cores/` doesn't).\r\n\r\n_If_ you've put Plumage in a subdirectory (e.g.\r\n`http://www.institution.edu/cores/`) and want maximum search engine\r\nvisibility, you have two choices:\r\n\r\n1. If you're using an automated process to build a sitemap for your\r\nwhole site, make sure that automatic process picks up every `.html`\r\ngenerated by Plumage.\r\n\r\n2. Otherwise, make sure to add the sitemap URL to your site-wide\r\n`robots.txt`. For example, if you've deployed your site at\r\n`http://www.institution.edu/cores/`, add the line `Sitemap:\r\nhttp://www.institution.edu/cores/assets/sitemap.xml` inside\r\n`http://www.institution.edu/robots.txt`. (You can do this even\r\nif you have a [preexisting sitemap listed][Multiple sitemaps in robots.txt]\r\nthere.)\r\n\r\n##  Managing deployments\r\n\r\n`build_deploy_command` is an optional command line that gets run after\r\nevery Plumage site build. You can use this to create a deploy hook on\r\nspecific roles.\r\n\r\nFor example, you might want to run Plumage on a staging server, and\r\nuse rsync to copy the final production files to a live production\r\nserver.\r\n\r\n    [production]\r\n    url = http://cores.yoursite.edu/\r\n    output_path = /var/www/html/cores-prod/\r\n    build_deploy_command = rsync -avz -e ssh --delete /var/www/html/cores-prod/ user@cores.yoursite.edu:/var/www/html/\r\n\r\n    [dev]\r\n    url = http://dev-cores.yoursite.edu/\r\n    output_path = /var/www/html/cores-dev/\r\n\r\n[UCSF Cores Search]: http://cores.ucsf.edu/\r\n[CTSI]: http://ctsi.ucsf.edu/\r\n[RRP]: http://rrp.ucsf.edu/\r\n[UCSF]: http://www.ucsf.edu/\r\n[slides]: http://www.slideshare.net/CTSIatUCSF/ucsf-cores-search-20-design-strategy-overview\r\n[TLDRLegal]: http://www.tldrlegal.com/license/bsd-3-clause-license-(revised)\r\n[Twitter Bootstrap]: http://twitter.github.com/bootstrap/\r\n[Placeholders.js]: https://github.com/jamesallardice/Placeholders.js\r\n[Resize Events]: http://irama.org/web/dhtml/resize-events/\r\n[jQuery]: http://jquery.com/\r\n[html5shiv]: http://code.google.com/p/html5shiv/\r\n[Apache 2.0 license]: http://www.apache.org/licenses/LICENSE-2.0\r\n[GPL]: http://www.gnu.org/licenses/gpl.html\r\n[MIT license]: http://opensource.org/licenses/mit-license.php\r\n[Perl license]: http://dev.perl.org/licenses/\r\n[tarball]: https://github.com/CTSIatUCSF/plumage/tarball/master\r\n[ZIP file]: https://github.com/CTSIatUCSF/plumage/zipball/master\r\n[Perlbrew]: http://perlbrew.pl/\r\n[CPAN]: http://www.cpan.org/\r\n[Swiftype]: http://swiftype.com/\r\n[CSS specificity]: http://www.htmldog.com/guides/cssadvanced/specificity/\r\n[Template Toolkit]: http://template-toolkit.org/\r\n[sitemap]: https://support.google.com/webmasters/bin/answer.py?hl=en&answer=156184\r\n[sitemap in robots.txt]: https://support.google.com/webmasters/bin/answer.py?hl=en&answer=183669\r\n[Multiple sitemaps in robots.txt]: http://stackoverflow.com/questions/2594179/multiple-sitemap-entries-in-robots-txt\r\n","google":"","name":"Plumage","tagline":"Biomedical resource discovery for institutions, powered by eagle-i"}